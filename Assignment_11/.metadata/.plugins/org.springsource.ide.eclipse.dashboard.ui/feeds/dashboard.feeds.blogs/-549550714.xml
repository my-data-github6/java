<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Spring]]></title><description><![CDATA[Level up your Java code and explore what Spring can do for you.]]></description><link>https://spring.io</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 19 Oct 2023 13:47:19 GMT</lastBuildDate><item><title><![CDATA[Spring Boot 3.1.5 available now]]></title><link>https://spring.io/blog/2023/10/19/spring-boot-3-1-5-available-now</link><guid isPermaLink="true">https://spring.io/blog/2023/10/19/spring-boot-3-1-5-available-now</guid><dc:creator><![CDATA[Moritz Halbritter]]></dc:creator><pubDate>Thu, 19 Oct 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I&apos;m happy to announce that Spring Boot &lt;code&gt;3.1.5&lt;/code&gt; has been released and is now available from Maven Central.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href=&quot;https://github.com/spring-projects/spring-boot/releases/tag/v3.1.5&quot;&gt;62 bug fixes, documentation improvements, and dependency upgrades&lt;/a&gt;. Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;
&lt;h3 id=&quot;how-can-you-help&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-can-you-help&quot; aria-label=&quot;how can you help permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&apos;re interested in helping out, check out the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution&quot;&gt;&quot;ideal for contribution&quot; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href=&quot;https://stackoverflow.com&quot;&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href=&quot;https://stackoverflow.com/tags/spring-boot&quot;&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-boot/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/3.1.5/reference/html&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-boot&quot;&gt;Stack Overflow&lt;/a&gt; | &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Boot 3.0.12 available now]]></title><link>https://spring.io/blog/2023/10/19/spring-boot-3-0-12-available-now</link><guid isPermaLink="true">https://spring.io/blog/2023/10/19/spring-boot-3-0-12-available-now</guid><dc:creator><![CDATA[Moritz Halbritter]]></dc:creator><pubDate>Thu, 19 Oct 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I&apos;m happy to announce that Spring Boot &lt;code&gt;3.0.12&lt;/code&gt; has been released and is now available from Maven Central.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href=&quot;https://github.com/spring-projects/spring-boot/releases/tag/v3.0.12&quot;&gt;48 bug fixes, documentation improvements, and dependency upgrades&lt;/a&gt;. Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;
&lt;h3 id=&quot;how-can-you-help&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-can-you-help&quot; aria-label=&quot;how can you help permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&apos;re interested in helping out, check out the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution&quot;&gt;&quot;ideal for contribution&quot; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href=&quot;https://stackoverflow.com&quot;&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href=&quot;https://stackoverflow.com/tags/spring-boot&quot;&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-boot/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/3.0.12/reference/html&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-boot&quot;&gt;Stack Overflow&lt;/a&gt; | &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Boot 2.7.17 available now]]></title><link>https://spring.io/blog/2023/10/19/spring-boot-2-7-17-available-now</link><guid isPermaLink="true">https://spring.io/blog/2023/10/19/spring-boot-2-7-17-available-now</guid><dc:creator><![CDATA[Andy Wilkinson]]></dc:creator><pubDate>Thu, 19 Oct 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I&apos;m happy to announce that Spring Boot &lt;code&gt;2.7.17&lt;/code&gt; has been released and is now available from Maven Central.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href=&quot;https://github.com/spring-projects/spring-boot/releases/tag/v2.7.17&quot;&gt;32 bug fixes, documentation improvements, and dependency upgrades&lt;/a&gt;. Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;
&lt;h3 id=&quot;how-can-you-help&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-can-you-help&quot; aria-label=&quot;how can you help permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&apos;re interested in helping out, check out the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution&quot;&gt;&quot;ideal for contribution&quot; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href=&quot;https://stackoverflow.com&quot;&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href=&quot;https://stackoverflow.com/tags/spring-boot&quot;&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-boot/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.7.17/reference/html&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-boot&quot;&gt;Stack Overflow&lt;/a&gt; | &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Security 5.8.8, 6.0.8, 6.1.5 and 6.2.0-RC2 released]]></title><link>https://spring.io/blog/2023/10/18/spring-security-6-2-0-rc2-released</link><guid isPermaLink="true">https://spring.io/blog/2023/10/18/spring-security-6-2-0-rc2-released</guid><dc:creator><![CDATA[Steve Riesenberg]]></dc:creator><pubDate>Wed, 18 Oct 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I am pleased to announce that the Spring Security &lt;code&gt;5.8.8&lt;/code&gt;, &lt;code&gt;6.0.8&lt;/code&gt;, &lt;code&gt;6.1.5&lt;/code&gt; and &lt;code&gt;6.2.0-RC2&lt;/code&gt; versions are available now.&lt;/p&gt;
&lt;p&gt;Please refer to the &lt;a href=&quot;https://github.com/spring-projects/spring-security/releases&quot;&gt;releases page&lt;/a&gt; for more detail on what is included in each release. In particular, you can review the release notes for each milestone that will make up the &lt;code&gt;6.2.0&lt;/code&gt; release (&lt;a href=&quot;https://github.com/spring-projects/spring-security/releases/tag/6.2.0-M1&quot;&gt;&lt;code&gt;6.2.0-M1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/spring-projects/spring-security/releases/tag/6.2.0-M2&quot;&gt;&lt;code&gt;6.2.0-M2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/spring-projects/spring-security/releases/tag/6.2.0-M3&quot;&gt;&lt;code&gt;6.2.0-M3&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/spring-projects/spring-security/releases/tag/6.2.0-RC1&quot;&gt;&lt;code&gt;6.2.0-RC1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/spring-projects/spring-security/releases/tag/6.2.0-RC2&quot;&gt;&lt;code&gt;6.2.0-RC2&lt;/code&gt;&lt;/a&gt;) next month.&lt;/p&gt;
&lt;p&gt;We encourage you to take the latest release candidate for a spin and provide any feedback you have! Some notable changes available in the 6.2 release candidate include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add with() method to apply SecurityConfigurerAdapter &lt;a href=&quot;https://github.com/spring-projects/spring-security/pull/13432&quot;&gt;#13432&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Automatically enable .cors() if CorsConfigurationSource bean is present &lt;a href=&quot;https://github.com/spring-projects/spring-security/issues/5011&quot;&gt;#5011&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Simplify configuration of OAuth2 Client component model &lt;a href=&quot;https://github.com/spring-projects/spring-security/pull/13587&quot;&gt;#13587&lt;/a&gt; (&lt;a href=&quot;https://spring.io/blog/2023/08/22/tackling-the-oauth2-client-component-model-in-spring-security/&quot;&gt;blog post&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring-security/reference/6.2-SNAPSHOT/servlet/oauth2/index.html&quot;&gt;docs&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add OIDC Back-channel Logout Support &lt;a href=&quot;https://github.com/spring-projects/spring-security/issues/7845&quot;&gt;#7845&lt;/a&gt; (&lt;a href=&quot;https://docs.spring.io/spring-security/reference/6.2-SNAPSHOT/reactive/oauth2/login/logout.html#configure-provider-initiated-oidc-logout&quot;&gt;docs&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Test coverage for virtual threads &lt;a href=&quot;https://github.com/spring-projects/spring-security/issues/12790&quot;&gt;#12790&lt;/a&gt;, &lt;a href=&quot;https://github.com/spring-projects/spring-security/issues/12791&quot;&gt;#12791&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add servlet pattern support to AuthorizeHttpRequests &lt;a href=&quot;https://github.com/spring-projects/spring-security/pull/13857&quot;&gt;#13857&lt;/a&gt; (&lt;a href=&quot;https://docs.spring.io/spring-security/reference/6.2-SNAPSHOT/servlet/authorization/authorize-http-requests.html#match-by-mvc&quot;&gt;docs&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To update your project to use the release candidate for Gradle builds, add the following to &lt;code&gt;build.gradle&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;ext[&apos;spring-security.version&apos;] = &apos;6.2.0-RC2&apos;

repositories {
    ...
    maven { url &apos;https://repo.spring.io/milestone&apos; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or for Maven builds, add the following to &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;#x3C;properties&gt;
  &amp;#x3C;spring-security.version&gt;6.2.0-RC2&amp;#x3C;/spring-security.version&gt;
&amp;#x3C;/properties&gt;
&amp;#x3C;repositories&gt;
  ...
  &amp;#x3C;repository&gt;
    &amp;#x3C;id&gt;spring-milestones&amp;#x3C;/id&gt;
    &amp;#x3C;name&gt;Spring Milestones&amp;#x3C;/name&gt;
    &amp;#x3C;url&gt;https://repo.spring.io/milestone&amp;#x3C;/url&gt;
    &amp;#x3C;snapshots&gt;
      &amp;#x3C;enabled&gt;false&amp;#x3C;/enabled&gt;
    &amp;#x3C;/snapshots&gt;
  &amp;#x3C;/repository&gt;
&amp;#x3C;/repositories&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Spring Security &lt;code&gt;6.2.0-RC2&lt;/code&gt; requires Spring Framework &lt;code&gt;6.1.0-RC1&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;support&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#support&quot; aria-label=&quot;support permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href=&quot;#support&quot;&gt;&lt;/a&gt;Support&lt;/h2&gt;
&lt;p&gt;As always, we look forward to hearing your &lt;a href=&quot;https://github.com/spring-projects/spring-security/issues&quot;&gt;feedback on GitHub&lt;/a&gt; and your &lt;a href=&quot;https://stackoverflow.com&quot;&gt;questions on StackOverflow&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://projects.spring.io/spring-security/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-security&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-security/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-security/reference/&quot;&gt;Documentation&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Batch 5.1 RC1 is out!]]></title><link>https://spring.io/blog/2023/10/18/spring-batch-5-1-rc1-is-out</link><guid isPermaLink="true">https://spring.io/blog/2023/10/18/spring-batch-5-1-rc1-is-out</guid><dc:creator><![CDATA[Mahmoud Ben Hassine]]></dc:creator><pubDate>Wed, 18 Oct 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I am pleased to announce that the first release candidate of Spring Batch 5.1 is now available from our milestone repository.&lt;/p&gt;
&lt;p&gt;The main theme of this release is improving the getting started experience of our users. This blog post walks you through the main improvements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Updated getting started guides&lt;/li&gt;
&lt;li&gt;Revamped samples&lt;/li&gt;
&lt;li&gt;Enhanced issue reporting guide&lt;/li&gt;
&lt;li&gt;Dependencies upgrades&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the complete list of changes, please check the &lt;a href=&quot;https://github.com/spring-projects/spring-batch/releases/tag/v5.1.0-RC1&quot;&gt;release notes&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;updated-getting-started-guides&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#updated-getting-started-guides&quot; aria-label=&quot;updated getting started guides permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Updated getting started guides&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://spring.io/guides/gs/batch-processing/&quot;&gt;Getting started guide&lt;/a&gt; has been around for a long time and served well as a showcase of how to use Spring Batch with Spring Boot. However, not all our users are Spring Boot users, and one of the frequent asks is to provide the same getting started experience with plain Spring Batch.&lt;/p&gt;
&lt;p&gt;For this reason, we introduced a new &lt;a href=&quot;https://github.com/spring-projects/spring-batch#two-minutes-tutorial&quot;&gt;Two minutes tutorial&lt;/a&gt; with a step-by-step guide to create a Spring Batch project and implement a simple &quot;Hello world&quot;  job. This should improve the getting started experience for non Boot users. That said, the current Spring Boot based guide has been updated to the latest Spring Boot 3 version to show how to use the new features in Spring Batch 5 like Java Records support.&lt;/p&gt;
&lt;h2 id=&quot;revamped-samples&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#revamped-samples&quot; aria-label=&quot;revamped samples permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Revamped samples&lt;/h2&gt;
&lt;p&gt;In this release, we have reworked all the code examples in our samples suite. Samples are now organized by feature in separate packages. This makes it easier for you to understand and learn about specific features in Spring Batch. The main &lt;code&gt;README&lt;/code&gt; file includes a table that shows available samples and the features they cover: &lt;a href=&quot;https://github.com/spring-projects/spring-batch/tree/main/spring-batch-samples&quot;&gt;Spring Batch Samples&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Moreover, each sample has now its own &lt;code&gt;README&lt;/code&gt; file that explains the sample in details and provides the instructions to run it. Samples can now be run as unit tests from an IDE or from the command line, to get a &quot;clone and run&quot; experience. With the new structure in place, you are literally two commands away from having a running Spring Batch sample in your local environment!&lt;/p&gt;
&lt;p&gt;Finally, most samples are now implemented in two Spring configuration styles: Java configuration style and XML configuration style. This makes it easier for you to compare both configuration styles and help you when migrating XML configurations to Java configurations.&lt;/p&gt;
&lt;h2 id=&quot;enhanced-issue-reporting-guide&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#enhanced-issue-reporting-guide&quot; aria-label=&quot;enhanced issue reporting guide permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Enhanced issue reporting guide&lt;/h2&gt;
&lt;p&gt;Just like having a good user experience when tying out a new project or contributing to an existing project is important, we believe that having a good experience when reporting issues is also important. For this reason, and as part of the &quot;Improving the Getting Started Experience&quot; theme, we have reworked the issue reporting process to provide a step-by-step guide on how to report issues: &lt;a href=&quot;https://github.com/spring-projects/spring-batch/blob/main/ISSUE_REPORTING.md&quot;&gt;Issue Reporting Guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The new guide includes a project template with a minimal complete verifiable example that works with an embedded datasource. This template is a starting point for you to edit as needed in order to reproduce an issue. The guide also provides a Docker + TestContainers template for issues that involve non embeddable databases like PostgreSQL or MySQL.&lt;/p&gt;
&lt;h2 id=&quot;dependencies-upgrades&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#dependencies-upgrades&quot; aria-label=&quot;dependencies upgrades permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dependencies upgrades&lt;/h2&gt;
&lt;p&gt;This milestone release upgrades Spring dependencies to the following versions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring Framework 6.1.0-RC1&lt;/li&gt;
&lt;li&gt;Spring Integration 6.2.0-RC1&lt;/li&gt;
&lt;li&gt;Spring Data 3.2.0-RC1&lt;/li&gt;
&lt;li&gt;Spring LDAP 3.2.0-RC1&lt;/li&gt;
&lt;li&gt;Spring AMQP 3.1.0-RC1&lt;/li&gt;
&lt;li&gt;Spring Kafka 3.1.0-RC1&lt;/li&gt;
&lt;li&gt;Micrometer 1.12.0-RC1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;whats-next&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#whats-next&quot; aria-label=&quot;whats next permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What&apos;s next?&lt;/h2&gt;
&lt;h3 id=&quot;share-your-feedback&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#share-your-feedback&quot; aria-label=&quot;share your feedback permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Share your feedback!&lt;/h3&gt;
&lt;p&gt;First, I would like to thank all contributors who had a role in this release! You can try Spring Batch 5.1.0-RC1 with Spring Boot 3.2.0-RC1. We are planning to release Spring Batch 5.1 GA later this November 2023.&lt;/p&gt;
&lt;p&gt;We look forward to your feedback on &lt;a href=&quot;https://github.com/spring-projects/spring-batch/issues&quot;&gt;Github Issues&lt;/a&gt;, &lt;a href=&quot;https://github.com/spring-projects/spring-batch/discussions&quot;&gt;Github Discussions&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/springbatch&quot;&gt;Twitter&lt;/a&gt;, and &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-batch&quot;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;upgrade-to-spring-batch-5&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#upgrade-to-spring-batch-5&quot; aria-label=&quot;upgrade to spring batch 5 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Upgrade to Spring Batch 5&lt;/h3&gt;
&lt;p&gt;I would like to remind our users that Spring Batch 4.3.x will be out of OSS support on November, 18th 2023. Please consider upgrading your applications to Spring Batch 5 at your earliest convenience. You can find the migration guide to v5 &lt;a href=&quot;https://github.com/spring-projects/spring-batch/wiki/Spring-Batch-5.0-Migration-Guide&quot;&gt;here&lt;/a&gt;. Feel free to reach out to the Spring Batch team on Github if you need help on migrating your existing applications to Spring Batch 5!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-batch&quot;&gt;Spring Batch Home&lt;/a&gt;|&lt;a href=&quot;https://github.com/spring-projects/spring-batch&quot;&gt;Source on Github&lt;/a&gt;|&lt;a href=&quot;https://docs.spring.io/spring-batch/docs/5.1.0-RC1/reference/html/index.html&quot;&gt;Reference documentation&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Authorization Server 1.2.0-RC1 available now]]></title><link>https://spring.io/blog/2023/10/18/spring-authorization-server-1-2-0-rc1-available-now</link><guid isPermaLink="true">https://spring.io/blog/2023/10/18/spring-authorization-server-1-2-0-rc1-available-now</guid><dc:creator><![CDATA[Joe Grandja]]></dc:creator><pubDate>Wed, 18 Oct 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, it is my pleasure to announce the release of Spring Authorization Server 1.2.0-RC1.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&quot;https://github.com/spring-projects/spring-authorization-server/releases/tag/1.2.0-RC1&quot;&gt;release notes&lt;/a&gt; for complete details.&lt;/p&gt;
&lt;p&gt;To get started using Spring Authorization Server, see the &lt;a href=&quot;https://docs.spring.io/spring-authorization-server/reference/getting-started.html&quot;&gt;Getting Started&lt;/a&gt; chapter of the reference documentation and the &lt;a href=&quot;https://github.com/spring-projects/spring-authorization-server/tree/main/samples&quot;&gt;samples&lt;/a&gt; to become familiar with setup and configuration.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-authorization-server&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-authorization-server/issues&quot;&gt;GitHub Issues&lt;/a&gt; | &lt;a href=&quot;https://github.com/orgs/spring-projects/projects/8/views/21&quot;&gt;Project Board&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Authorization Server 1.1.3, 1.0.4 and 0.4.4 available now]]></title><link>https://spring.io/blog/2023/10/18/spring-authorization-server-1-1-3-1-0-4-and-0-4-4-available-now</link><guid isPermaLink="true">https://spring.io/blog/2023/10/18/spring-authorization-server-1-1-3-1-0-4-and-0-4-4-available-now</guid><dc:creator><![CDATA[Joe Grandja]]></dc:creator><pubDate>Wed, 18 Oct 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, it is my pleasure to announce the general availability of Spring Authorization Server 1.1.3, 1.0.4 and 0.4.4.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&quot;https://github.com/spring-projects/spring-authorization-server/releases/tag/1.1.3&quot;&gt;1.1.3&lt;/a&gt;, &lt;a href=&quot;https://github.com/spring-projects/spring-authorization-server/releases/tag/1.0.4&quot;&gt;1.0.4&lt;/a&gt; and &lt;a href=&quot;https://github.com/spring-projects/spring-authorization-server/releases/tag/0.4.4&quot;&gt;0.4.4&lt;/a&gt; release notes for complete details.&lt;/p&gt;
&lt;p&gt;To get started using Spring Authorization Server, see the &lt;a href=&quot;https://docs.spring.io/spring-authorization-server/docs/current/reference/html/getting-started.html&quot;&gt;Getting Started&lt;/a&gt; chapter of the reference documentation and the &lt;a href=&quot;https://github.com/spring-projects/spring-authorization-server/tree/1.1.x/samples&quot;&gt;samples&lt;/a&gt; to become familiar with setup and configuration.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-authorization-server&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-authorization-server/issues&quot;&gt;GitHub Issues&lt;/a&gt; | &lt;a href=&quot;https://github.com/orgs/spring-projects/projects/8/views/21&quot;&gt;Project Board&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[This Week in Spring - October 17th, 2023]]></title><link>https://spring.io/blog/2023/10/17/this-week-in-spring-october-17th-2023</link><guid isPermaLink="true">https://spring.io/blog/2023/10/17/this-week-in-spring-october-17th-2023</guid><dc:creator><![CDATA[Josh Long]]></dc:creator><pubDate>Tue, 17 Oct 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hi, Spring fans! Welcome to yet another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! It&apos;s October 17th, 2023, and I am here in Montreal, Canada, and then I&apos;m off to Salt Lake City, Utah on Thursday for the Java User Group there. Don&apos;t miss it!&lt;/p&gt;
&lt;p&gt;We&apos;ve got a lot to cover this week so let&apos;s dive right into it!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/10/16/apache-kafkas-exactly-once-semantics-in-spring-cloud-stream-kafka&quot;&gt;Apache Kafka&apos;s Exactly-Once Semantics in Spring Cloud Stream Kafka Applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://piotrminkowski.com/2023/10/13/guide-to-modulith-with-spring-boot/&quot;&gt;Guide to Modulith with Spring Boot - Piotr&apos;s TechBlog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/10/16/runtime-efficiency-with-spring&quot;&gt;Runtime efficiency with Spring (today and tomorrow)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/10/13/spring-data-2023-0-5-2022-0-11-and-2021-2-17-released&quot;&gt;Spring Data 2023.0.5, 2022.0.11, and 2021.2.17 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/10/12/spring-framework-6-0-13-available-now&quot;&gt;Spring Framework 6.0.13 available now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/10/11/transactional-rollback-strategies-with-spring-cloud-stream-and-apache-kafka&quot;&gt;Transactional Rollback Strategies with Spring Cloud Stream and Apache Kafka&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wkorando.github.io/sip-of-java/015.html&quot;&gt;Using Records as Projections in JPA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Spring Cloud Dataflow 2.11.1 Released]]></title><link>https://spring.io/blog/2023/10/17/spring-cloud-dataflow-2-11-1-released</link><guid isPermaLink="true">https://spring.io/blog/2023/10/17/spring-cloud-dataflow-2-11-1-released</guid><dc:creator><![CDATA[Corneil du Plessis]]></dc:creator><pubDate>Tue, 17 Oct 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I’m happy to announce that Spring Cloud Dataflow &lt;code&gt;2.11.1&lt;/code&gt; has been released and is now available from Maven Central.&lt;/p&gt;
&lt;h1 id=&quot;notable-changes-in-2111&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#notable-changes-in-2111&quot; aria-label=&quot;notable changes in 2111 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Notable Changes in 2.11.1&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Updated versions and mitigations for CVEs.
&lt;ul&gt;
&lt;li&gt;json-smart: 2.4.11&lt;/li&gt;
&lt;li&gt;nimbus-jose-jwt: 9.31&lt;/li&gt;
&lt;li&gt;snappy-java: 1.1.10.4&lt;/li&gt;
&lt;li&gt;commons-compress: 1.24.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ensure TaskOperations launch API is backwards compatible.&lt;/li&gt;
&lt;li&gt;Fix issues in dependency managements of modules after creating mono-repo.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;library-updates&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#library-updates&quot; aria-label=&quot;library updates permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Library Updates&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Spring Boot 2.7.16&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See the &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-dataflow/releases/tag/v2.11.1&quot;&gt;release notes&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h2 id=&quot;stay-in-touch&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#stay-in-touch&quot; aria-label=&quot;stay in touch permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Stay in touch...&lt;/h2&gt;
&lt;p&gt;As always, we welcome feedback and contributions, so please reach out to us on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-cloud-dataflow&quot;&gt;Stackoverflow&lt;/a&gt; or &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-dataflow/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Runtime efficiency with Spring (today and tomorrow)]]></title><link>https://spring.io/blog/2023/10/16/runtime-efficiency-with-spring</link><guid isPermaLink="true">https://spring.io/blog/2023/10/16/runtime-efficiency-with-spring</guid><dc:creator><![CDATA[Sébastien Deleuze]]></dc:creator><pubDate>Mon, 16 Oct 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;With Spring Framework 6.1 and Spring Boot 3.2 general availability approaching, we would like to share an overview about several efforts the Spring team is pursuing to allow developers to optimize the runtime efficiency of their applications.&lt;/p&gt;
&lt;p&gt;We are going to cover the following technologies and use cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring MVC as a lean Virtual Threads web stack on JDK 21&lt;/li&gt;
&lt;li&gt;Optimized container deployment with Spring and GraalVM Native Image&lt;/li&gt;
&lt;li&gt;JVM Checkpoint Restore: Scale to zero with Spring and Project CRaC&lt;/li&gt;
&lt;li&gt;A glimpse into OpenJDK’s future with Spring AOT and Project Leyden&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you prefer watching a video than reading a blog post, we recommend the “Spring Framework 6: Strategic Themes” presentation from Devoxx Belgium 2023:&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/5jYlKPeo6l4?si=dyifhCNN1AizsGbI&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h2 id=&quot;context&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#context&quot; aria-label=&quot;context permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Context&lt;/h2&gt;
&lt;p&gt;Let’s begin with the most important question: why should we care about improving runtime efficiency of our Cloud workloads? The first reason is probably cost optimization. We all want to run our applications in a cheaper way. Cheaper hosting usually means using less CPU, less memory, less resources, which makes our workloads more sustainable. We are also in a world where running your application will probably involve Kubernetes and containers one way or another, which usually requires extra care with the Java Virtual Machine startup time, warm-up time and memory management.&lt;/p&gt;
&lt;p&gt;The goal of the Spring team is to allow various options (some of them can be combined) to optimize the runtime footprint and the scalability of the millions of Spring workloads in production. Our goal is to minimize as much as possible the amount of changes required in your Spring application to take advantage of those improvements, but of course there are usually trade-offs involved, trade-offs that we are going to make as explicit as possible. Hopefully, that should give you enough information to get a clearer picture of how that applies to your organization, your applications, and see which trade-offs are worth it for your context.&lt;/p&gt;
&lt;p&gt;A common requirement to take advantage of those runtime efficiency improvements is to upgrade to Spring Boot 3, based on Spring Framework 6, which has a Java 17 baseline and requires transitioning from Java EE (&lt;code&gt;javax&lt;/code&gt; package) to Jakarta EE (&lt;code&gt;jakarta&lt;/code&gt; package). When you do such an upgrade, a set of new runtime efficiency features are made available to you.&lt;/p&gt;
&lt;h2 id=&quot;spring-mvc-as-a-lean-virtual-threads-web-stack-on-jdk-21&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#spring-mvc-as-a-lean-virtual-threads-web-stack-on-jdk-21&quot; aria-label=&quot;spring mvc as a lean virtual threads web stack on jdk 21 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Spring MVC as a lean Virtual Threads web stack on JDK 21&lt;/h2&gt;
&lt;p&gt;Let’s begin with a technology just released, available as of Java 21. &lt;a href=&quot;https://docs.oracle.com/en/java/javase/21/core/virtual-threads.html&quot;&gt;Virtual Threads&lt;/a&gt; intend to reduce the cost of server applications written in the simple and popular thread-per-request style to scale with near-optimal hardware utilization.&lt;/p&gt;
&lt;p&gt;Virtual Threads make blocking on I/O cheap and are therefore an ideal fit for Spring Web MVC applications on a Servlet stack. Spring MVC can take full advantage of those new runtime characteristics on e.g. Tomcat or Jetty with a Virtual Threads setup. This does not require code changes in most use cases and adapts naturally to provide optimal performance without having to fine-tune a thread pool configuration.&lt;/p&gt;
&lt;p&gt;We have also heard the feedback from the Spring community asking us to not only give the choice between RestTemplate in maintenance mode and a reactive WebClient.
So we took the decision to introduce a “Virtual Threads friendly modern HTTP client” named &lt;a href=&quot;https://spring.io/blog/2023/07/13/new-in-spring-6-1-restclient&quot;&gt;&lt;code&gt;RestClient&lt;/code&gt;&lt;/a&gt; (also an attractive option without Virtual Threads of course) in Spring Framework 6.1. Spring Cloud Gateway and related infrastructure across the Spring portfolio can equally benefit from a Virtual Threads setup along with Spring MVC, providing a consistent overall experience.&lt;/p&gt;
&lt;p&gt;So, what does that mean for WebFlux and the reactive stack?&lt;/p&gt;
&lt;p&gt;We, on purpose, chose to have distinct blocking and reactive stacks to take full advantage of reactive in WebFlux server, and to keep the Spring Web MVC stack (by far the most frequently used web stack on &lt;a href=&quot;https://start.spring.io/&quot;&gt;start.spring.io&lt;/a&gt;) as lean as possible with a regular blocking thread architecture. Spring MVC on a Servlet container is ideally positioned for Virtual Threads as an appealing solution for improving the scalability of traditional web applications. WebFlux server on the other hand provides an optimized reactive stack as an ideal fit with a Netty I/O setup, delivering equivalent runtime benefits through a different programming model.&lt;/p&gt;
&lt;p&gt;When you need application-level concurrency (for example sending multiple remote HTTP requests, potentially streamed, and combine the result), &lt;a href=&quot;https://openjdk.org/jeps/428&quot;&gt;Project Loom structured concurrency&lt;/a&gt; may provide an interesting low-level building block in the future, but this is not the kind of API that developers typically need in Spring applications (and it is still in preview). For such a use case, WebFlux and reactive APIs like &lt;a href=&quot;https://projectreactor.io/&quot;&gt;Reactor&lt;/a&gt; have an unmatched added value for the time being, as well as &lt;a href=&quot;https://kotlinlang.org/docs/coroutines-basics.html&quot;&gt;Kotlin Coroutines&lt;/a&gt; and their &lt;a href=&quot;https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/&quot;&gt;&lt;code&gt;Flow&lt;/code&gt;&lt;/a&gt; type which provides an interesting combination of imperative and declarative programming models. &lt;a href=&quot;https://rsocket.io/&quot;&gt;RSocket&lt;/a&gt; is another example of great added value of a reactive interaction model.&lt;/p&gt;
&lt;p&gt;Note that you do not have to choose one or the other since Spring MVC provides optional reactive support as well. So if you need to deal with concurrency just for a few use cases in your server application, you can simply use a Spring MVC stack with a Virtual Threads setup and seamlessly include e.g. reactive &lt;code&gt;WebClient&lt;/code&gt; interactions in your web controllers, with Spring MVC adapting reactive return values to Servlet async responses. This reactive support in Spring MVC is entirely optional, with Reactor and Reactive Streams only needed in the stack when actually using reactive endpoints, and with the HTTP stack being based on a Servlet container such as Tomcat or Jetty (rather than Netty).&lt;/p&gt;
&lt;p&gt;For typical web scenarios, we expect Virtual Threads to become a common choice with Spring MVC as a lean web server stack for Spring developers on Java 21+. The wider Java ecosystem has to fully adapt to Virtual Threads still, avoiding any thread pinning e.g. in common JDBC driver implementations, but even that is expected to be resolved soon. Make sure to use Spring Boot 3.2 or higher, to set the property &lt;code&gt;spring.threads.virtual.enabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, and to use the latest library and driver versions available for your evaluation of Virtual Threads.&lt;/p&gt;
&lt;h2 id=&quot;optimized-container-deployment-with-spring-and-graalvm-native-image&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#optimized-container-deployment-with-spring-and-graalvm-native-image&quot; aria-label=&quot;optimized container deployment with spring and graalvm native image permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Optimized container deployment with Spring and GraalVM Native Image&lt;/h2&gt;
&lt;p&gt;We continue to refine the &lt;a href=&quot;https://www.graalvm.org/&quot;&gt;GraalVM&lt;/a&gt; native support introduced in Spring Boot 3. The main use case is building an optimized container image with &lt;a href=&quot;https://paketo.io/docs/concepts/buildpacks/&quot;&gt;Buildpacks&lt;/a&gt; that contains a tiny operating system base layer and your application compiled to a native executable thanks to Spring AOT (Ahead Of Time) transformations and GraalVM native image compiler. No JVM distribution needed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/mnrwi97vnhts/7cSYBs9iY8qkDVmo6xkEFi/061eb96111ff09c7cbe9deb4b67dccb9/graalvm-build-and-run.png&quot; alt=&quot;GraalVM native image build and execution&quot;&gt;&lt;/p&gt;
&lt;p&gt;That allows the deployment of tiny containers that start in dozens of milliseconds (typically 50x faster than the startup time on a regular JVM) with lower memory consumption for your application infrastructure and peak performance available immediately.&lt;/p&gt;
&lt;p&gt;GraalVM follows new Java features very closely, and for example already provides first-class Virtual Threads support: see Josh Long’s recent &lt;a href=&quot;https://spring.io/blog/2023/09/09/all-together-now-spring-boot-3-2-graalvm-native-images-java-21-and-virtual&quot;&gt;All together now&lt;/a&gt; blog post.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/mnrwi97vnhts/4x51OdYAtBsozX09RfJhSR/17754a5495cb914b78b6a7fae34e2e7b/graalvm-trade-offs.png&quot; alt=&quot;GraalVM trade-offs&quot;&gt;&lt;/p&gt;
&lt;p&gt;GraalVM’s excellent runtime characteristics are possible due to different trade-offs compared to the JVM. A native image compilation takes minutes instead of seconds. It requires additional metadata in order to properly handle reflection, proxies and other dynamic behaviors of the JVM. Spring infers a lot of those metadata, but any real project will likely require some additional hints to work properly (for your organization dependencies for example). Finally, the combination of Spring AOT transformations and GraalVM native image requires us to freeze the classpath and the Spring Boot bean conditions at build time. You will typically be able to change the URL or the password of your database in the runtime configuration, but not to change the database type or do something that changes the structure of the Spring beans.&lt;/p&gt;
&lt;p&gt;Historically, another drawback has been the limited peak performance due to the lack of just-in-time compilation, but the release of &lt;a href=&quot;https://medium.com/graalvm/a-new-graalvm-release-and-new-free-license-4aab483692f5&quot;&gt;Oracle GraalVM&lt;/a&gt; under the GraalVM Free Terms and Conditions license (see &lt;a href=&quot;https://www.oracle.com/java/technologies/javase/jdk-faqs.html#GraalVM-licensing&quot;&gt;related restrictions&lt;/a&gt;) challenges this assumption. You can subscribe to &lt;a href=&quot;https://github.com/paketo-buildpacks/rfcs/pull/294&quot;&gt;this related Buildpacks RFC&lt;/a&gt; to follow its potential upcoming support, and you can already try it with your Spring Boot workloads using &lt;a href=&quot;https://github.com/sdeleuze/spring-petclinic-data-jdbc/blob/native/Dockerfile.nativeoraclegraalvm&quot;&gt;this simple &lt;code&gt;Dockerfile&lt;/code&gt;&lt;/a&gt; as a starting point.&lt;/p&gt;
&lt;p&gt;With instant startup and peak performance available immediately, Spring Boot native applications can scale to zero. Let’s explore what that means.&lt;/p&gt;
&lt;h2 id=&quot;scale-to-zero&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#scale-to-zero&quot; aria-label=&quot;scale to zero permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Scale to zero&lt;/h2&gt;
&lt;p&gt;Scale to zero is a kind of generalization of serverless. Workloads can be deployed not only to serverless cloud platforms, but also to any Kubernetes or cloud platform providing the capability to scale to zero when there is no request to process. With Kubernetes, you can use solutions like &lt;a href=&quot;https://knative.dev/docs/&quot;&gt;Knative&lt;/a&gt; or &lt;a href=&quot;https://keda.sh/&quot;&gt;KEDA&lt;/a&gt; to scale to zero. And you are not limited to functions, you can scale to zero with any kind of application, any kind of programming model, traditional web applications included. The most important characteristic of serverless is not technical, it is the pay-as-you-use billing model it enables.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/mnrwi97vnhts/5pm74SH2kQw7A96OxQLdZ3/73bea7a5461baf87a9ca2bcd45ed7b53/scale-to-zero-use-cases.png&quot; alt=&quot;Scale to zero use cases&quot;&gt;&lt;/p&gt;
&lt;p&gt;There are various use cases where scaling to zero can be interesting. The JVM is amazing at developing high traffic websites, but let’s be honest, we also develop a lot of small back-office applications, typically not used all of the time. Why should we pay when nobody is using them? There are also staging environments which typically need to be up a small fraction of the time, and microservices where caching allows shutting down a few of them most of the time. And let’s not forget high availability which forces us to maintain two instances for each service always up in case of emergency because our application startup time is too long to recover from hazards.&lt;/p&gt;
&lt;p&gt;But how to scale to zero for projects that can’t accept the trade-offs that GraalVM native image requires?&lt;/p&gt;
&lt;h2 id=&quot;jvm-checkpoint-restore-scale-to-zero-with-spring-and-project-crac&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jvm-checkpoint-restore-scale-to-zero-with-spring-and-project-crac&quot; aria-label=&quot;jvm checkpoint restore scale to zero with spring and project crac permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JVM Checkpoint Restore: Scale to zero with Spring and Project CRaC&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.openjdk.org/display/crac/Main&quot;&gt;CRaC&lt;/a&gt; is an OpenJDK project that defines a new Java API to allow you to checkpoint and restore an application on the HotSpot JVM, developed by Azul Systems and also supported by AWS Lambda and IBM OpenLiberty in the meantime. It is based on &lt;a href=&quot;https://github.com/checkpoint-restore/criu&quot;&gt;CRIU&lt;/a&gt;, a project that implements checkpoint/restore functionality on Linux.&lt;/p&gt;
&lt;p&gt;The principle is the following: You start your application almost as usual but with a CRaC enabled version of the JDK. Then at some point, potentially after some workloads that will make your JVM hot by executing all common code paths, you trigger a checkpoint using an API call, a jcmd command, an HTTP endpoint, or another mechanism.&lt;/p&gt;
&lt;p&gt;A memory representation of the running JVM, including its warmness, is then serialized to disk, allowing a very fast restoration at a later point, potentially on another machine with a similar operating system and CPU architecture. The restored process retains all the capabilities of the HotSpot JVM, including further JIT optimizations at runtime.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/mnrwi97vnhts/16Q2OouwrMg0R6vZLn4RqH/75117abc05bfcc0564f1403273b1b595/spring-lifecycle-with-crac.png&quot; alt=&quot;Spring lifecycle with CRaC&quot;&gt;&lt;/p&gt;
&lt;p&gt;It is interesting to notice that “Checkpoint” and “Restore” match very well with the Spring application context lifecycle stop and start phases. Spring Framework 6.1 CRaC support is mainly about mapping CRaC and Spring lifecycle together, the rest of the support is not tied to CRaC and is mainly about Spring lifecycle refinements designed to properly close and recreate socket, files and pools. The goal here, in addition to the regular start and stop lifecycle, is to support multiple stop and restart cycles.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/mnrwi97vnhts/3cFvJjdSNp1RYiT1u6MEL5/e386c87c63cba47bcb8dbd8b5a40b839/crac-restoration.png&quot; alt=&quot;Instant restoration of a Spring Boot application&quot;&gt;&lt;/p&gt;
&lt;p&gt;Like GraalVM, Project CRaC allows an application to scale to zero with instant startup of a few dozens of milliseconds even on small servers. That’s 50x faster than a regular JVM cold start and similar to GraalVM native image. But let’s explore the trade-offs involved.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/mnrwi97vnhts/4mhWhWFNUAUm81IuSRZ3gO/91b9b9a1cfff71fa4d6dad2e549011cf/crac-trade-offs.png&quot; alt=&quot;Project CRaC trade-offs&quot;&gt;&lt;/p&gt;
&lt;p&gt;The first trade-off is that CRaC requires you to start your application ahead of time, before going to production. So should you start it on your CI/CD platform? With or without your production remote services? That raises a bunch of non-trivial questions.&lt;/p&gt;
&lt;p&gt;The second trade-off is the need for any feature involving sockets, files and pools to be closed and then to properly recreate those resources based on the CRaC lifecycle. Spring Boot takes care of that for you for &lt;a href=&quot;https://github.com/spring-projects/spring-checkpoint-restore-smoke-tests/blob/main/STATUS.adoc&quot;&gt;the supported scope&lt;/a&gt;. But some libraries simply don’t support that yet, so it may take some time before all of your stack is fully supported.&lt;/p&gt;
&lt;p&gt;The third trade-off is in our opinion the most tricky one. It may be tempting to create a self-contained ready-to-restore container image. But any secret loaded in memory during the checkpoint startup will be serialized to the snapshot files, leaking potentially sensitive information like your production database password.&lt;/p&gt;
&lt;p&gt;A potential solution could be to perform the checkpoint startup without the production environment configuration, and update your application configuration at restoration time. It is possible to do that using &lt;a href=&quot;https://github.com/OlgaMaciaszek/crac-db-refresh-scope&quot;&gt;Spring Cloud Context and @RefreshScope annotations&lt;/a&gt;. The Spring team may explore that topic in the future to see if more built-in support makes sense. You can also adopt the strategy to create and store the snapshot files on encrypted volumes directly on your Kubernetes platform, even if that requires deeper platform integration.&lt;/p&gt;
&lt;p&gt;The last key characteristic is that CRaC is Linux specific, and requires some &lt;a href=&quot;https://docs.azul.com/core/crac/crac-guidelines#starting-an-application-in-a-docker-container&quot;&gt;Linux capabilities fine tuning&lt;/a&gt; to work without the privileged mode.&lt;/p&gt;
&lt;p&gt;Keep in mind that we are in the early days of Project CRaC, and that Spring Boot 3.2 is the first release to support it. Some of those limitations will probably be lifted as the checkpoint restore technology evolves along with  Spring’s support. And check the &lt;a href=&quot;https://docs.spring.io/spring-framework/reference/6.1/integration/checkpoint-restore.html&quot;&gt;Spring Framework related documentation&lt;/a&gt; and &lt;a href=&quot;https://github.com/sdeleuze/spring-boot-crac-demo&quot;&gt;https://github.com/sdeleuze/spring-boot-crac-demo&lt;/a&gt; if you want to try this technology by yourself.&lt;/p&gt;
&lt;h2 id=&quot;a-glimpse-into-openjdks-future-with-spring-aot-and-project-leyden&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#a-glimpse-into-openjdks-future-with-spring-aot-and-project-leyden&quot; aria-label=&quot;a glimpse into openjdks future with spring aot and project leyden permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A glimpse into OpenJDK’s future with Spring AOT and Project Leyden&lt;/h2&gt;
&lt;p&gt;We have seen two ways for your Spring workloads to scale to zero with GraalVM and CRaC but involving non-trivial trade-offs. What if there was another way to improve your Spring Boot runtime characteristics with fewer constraints?&lt;/p&gt;
&lt;p&gt;You may have heard about &lt;a href=&quot;https://openjdk.org/projects/leyden/&quot;&gt;Project Leyden&lt;/a&gt;, a new OpenJDK project that intends to improve the startup time, time to peak performance, and footprint of Java programs. We recommend watching &lt;a href=&quot;https://www.youtube.com/watch?v=O1Oz2-AXKKM&quot;&gt;this related talk&lt;/a&gt; by Brian Goetz himself if you want to learn more.&lt;/p&gt;
&lt;p&gt;Project Leyden has recently introduced “premain” optimizations (basically &lt;a href=&quot;https://github.com/openjdk/leyden/tree/premain/test/hotspot/jtreg/premain/javac_new_workflow&quot;&gt;Class Data Sharing + AOT on steroids&lt;/a&gt;) and interestingly, the Java Platform team identified a great synergy with the &lt;a href=&quot;https://docs.spring.io/spring-framework/reference/core/aot.html&quot;&gt;Spring Ahead-Of-Time optimizations&lt;/a&gt;, originally created to allow GraalVM native image support, but already capable of providing a 15% faster startup time on the JVM.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/mnrwi97vnhts/3if3KnzijOnR6GtbEk12QM/ca87067f657e53066abcb00e75b52fc6/leyden-aot-data-points.png&quot; alt=&quot;Project Leyden with Spring AOT data points&quot;&gt;&lt;/p&gt;
&lt;p&gt;While “premain” optimizations are highly experimental (for now it is &lt;a href=&quot;https://github.com/openjdk/leyden/tree/premain&quot;&gt;an experimental branch of the Leyden repository on GitHub&lt;/a&gt;), the Spring team has recently been able to measure 2x to 4x faster startup time for the Spring Petclinic sample application by combining Spring AOT on the JVM and those optimizations from Project Leyden, as well as faster warm-up with hardly any trade-off.&lt;/p&gt;
&lt;p&gt;In their current form, unlike GraalVM and CRaC, those optimizations do not enable scaling to zero because they don’t allow applications to start in dozens of milliseconds in production. But well, if we get a significant improvement of the JVM startup and warm-up time with hardly any constraints, it has the potential to go mainstream and to be combined with other upcoming Leyden features that you could choose à la carte.&lt;/p&gt;
&lt;p&gt;We are happy to share that we have started a collaboration between the Java Platform Group and the Spring team to see how far we can push the boundaries of what is possible using Project Leyden’s premain approach. In combination with Spring AOT refinements specifically designed for the JVM, we expect further optimizations applicable to a wide range of Spring applications. We will share more in the upcoming months.&lt;/p&gt;
&lt;p&gt;Check the &lt;a href=&quot;https://github.com/sdeleuze/spring-boot-leyden-demo&quot;&gt;https://github.com/sdeleuze/spring-boot-leyden-demo&lt;/a&gt; repository if you want to try it yourself.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#conclusion&quot; aria-label=&quot;conclusion permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Listening to feedback from the Spring community across the world has proven to be a key source of inspiration for the Spring team, as well as pragmatic collaborations with companies such as Oracle, Bellsoft, Azul, and many others.&lt;/p&gt;
&lt;p&gt;We are working hard on supporting those new capabilities while minimizing the impact for Spring application development, providing straightforward upgrade paths for the many kinds of applications out there. This is the most challenging but also the most rewarding aspect of our strategic infrastructure efforts.&lt;/p&gt;
&lt;p&gt;Last but not least, we are looking for feedback on what you are most excited about for your organization and your projects. Do you think scale-to-zero and the pay-as-you-use billing model are worth the trade-offs required by GraalVM or CRaC? Is the reduced memory consumption provided by GraalVM native image a key advantage for you? Do you think Spring AOT on the JVM combined with Project Leyden has high potential? What is your perspective on Virtual Threads? Please let us know!&lt;/p&gt;</content:encoded></item></channel></rss>